}
)) %>%
select(
Treatment,
starts_with("YS"),
starts_with("X"))
outcome = df26_ys %>% select(starts_with("YS"), -YS_delta_viral_load_6m) %>% names()
df_bench = update_bench(26, df26_ys, outcome)
df27 = read_rds("cleaned_data/trial27.rds")
# 101 -> 87
df27_yp = df27 %>%
filter(!if_any(c(starts_with("YP"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
mutate(
YP_bleeding_category3 = as.numeric(YP_bleeding_category3),
YP_surgical_problem_bleeding = as.numeric(YP_surgical_problem_bleeding),
YP_bleeding_score = as.numeric(YP_bleeding_score)
) %>%
select(
Treatment,
starts_with("YP"),
starts_with("X"),
-YP_bleeding_text
)
outcome = df27_yp %>% select(starts_with("YP")) %>% names()
df_bench = update_bench(27, df27_yp, outcome)
# Step 1: Identify YS_ and YP_ variables with < 30% missingness
low_missing_vars = df27 %>%
select(starts_with("YS_")) %>%
summarise(across(everything(), ~ mean(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Proportion") %>%
filter(Missing_Proportion < 0.30) %>%
pull(Variable)
# Step 2: Keep all other variables, plus filtered YS_/YP_ variables
df27_ys = df27 %>%
select(-starts_with("YS_"), -starts_with("YP_")) %>%
bind_cols(df27 %>% select(all_of(low_missing_vars)))
# 101 -> 94
df27_ys = df27_ys %>%
filter(!if_any(c(starts_with("YS"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
),
YS_vent_mode_modification = as.numeric(YS_vent_mode_modification)) %>%
select(
Treatment,
starts_with("YS"),
starts_with("X"),
-YS_hypoxemia_episodes,
-YS_recruitment_maneuvers
)
outcome = df27_ys %>% select(starts_with("YS")) %>% names()
df_bench = update_bench(27, df27_ys, outcome)
df28 = read_rds("cleaned_data/trial28.rds")
df28_yp = df28 %>%
filter(!if_any(c(starts_with("YP"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
mutate(
YP_ContrSBP_6m = as.numeric(YP_ContrSBP_6m)
) %>%
select(
Treatment,
starts_with("YP"),
starts_with("X"),
-X_ControlledBP_0m)
df_bench = update_bench(28, df28_yp, "YP_ContrSBP_6m")
df28_ys = df28 %>%
filter(!if_any(c(starts_with("YS"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
select(
Treatment,
starts_with("YS"),
starts_with("X"),
-X_ControlledBP_0m)
outcome = df28_ys %>% select(starts_with("YS")) %>% names()
df28_ys = df28_ys %>%
mutate(across(all_of(outcome), as.numeric))
df_bench = update_bench(28, df28_ys, outcome)
df29 = read_rds("cleaned_data/trial29.rds")
# Step 1: Identify YS_ and YP_ variables with < 30% missingness
low_missing_vars = df29 %>%
select(starts_with("YP_")) %>%
summarise(across(everything(), ~ mean(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Missing_Proportion") %>%
filter(Missing_Proportion < 0.30) %>%
pull(Variable)
# Step 2: Keep all other variables, plus filtered YS_/YP_ variables
df29_yp = df29 %>%
select( -starts_with("YP_")) %>%
bind_cols(df29 %>% select(all_of(low_missing_vars)))
# 59 -> 58
df29_yp = df29_yp %>%
filter(!if_any(c(starts_with("YP"), Treatment, n_participants), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
select(
Treatment,
n_participants,
starts_with("YP"),
starts_with("X")
)
outcome = df29_yp %>% select(starts_with("YP")) %>% names()
df29_yp  = df29_yp %>%
mutate(across(all_of(outcome), as.numeric))
df_bench = update_bench(29, df29_yp, outcome)
df29_ys = df29 %>%
filter(!if_any(c(starts_with("YS"), Treatment, n_participants), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
select(
Treatment,
n_participants,
starts_with("YS"),
starts_with("X")
)
outcome = df29_ys %>% select(starts_with("YS")) %>% names()
df_bench = update_bench(29, df29_ys, outcome)
df30 = read_rds("cleaned_data/trial30.rds")
# 75 -> 61
df30_yp = df30 %>%
filter(!if_any(c(starts_with("YP"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
select(
Treatment,
starts_with("YP"),
starts_with("X"))
df_bench = update_bench(30, df30_yp, "YP_Adherence")
# 75 -> 56
df30_ys = df30 %>%
filter(!if_any(c(starts_with("YS"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
select(
Treatment,
starts_with("YS"),
starts_with("X"),
-YS_Dropout, -YS_MeanDaysBetween)
outcome = df30_ys %>% select(starts_with("YS")) %>% names()
df_bench = update_bench(30, df30_ys, outcome)
write_xlsx(df_comparison, "cleaned_data/meta_data_comparison.xlsx")
# write_xlsx(df_comparison, "cleaned_data/meta_data_comparison.xlsx")
write_xlsx(df_bench, "cleaned_data/meta_data_benchmark.xlsx")
# 1. Precision Gain Plot (ANCOVA)
ggplot(df_new, aes(x = outcome_group, y = precision_gain_AC)) +
geom_violin(trim = FALSE, fill = "lightblue", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray40") +
labs(
title = "ANCOVA vs Unadjusted Precision Gain",
x = "Outcome Group",
y = "Variance Ratio"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
df_new = df_comparison %>%
mutate(
outcome_group = case_when(
`Outcome Type` %in% c("continuous", "continuous proportion") ~ "continuous",
`Outcome Type` %in% c("ordinal", "categorical") ~ "categorical",
`Outcome Type` %in% c("binary", "composite binary") ~ "binary",
`Outcome Type` == "time to event" ~ "time_to_event",
TRUE ~ "other"
)
)
df_new = df_new %>%
rename(
precision_gain_AC = `How much precision gain can ANCOVA provide?`,
point_est_diff_AC = `The difference between unadjusted and ANCOVA point estimates`,
variance_ratio_AC = `The ratio between robust and model-based variance estimators`,
precision_gain_SL = `How much precision gain can Super Learner provide?`,
point_est_diff_SL = `The difference between unadjusted and Super Learner point estimates`
)
# 1. Precision Gain Plot (ANCOVA)
ggplot(df_new, aes(x = outcome_group, y = precision_gain_AC)) +
geom_violin(trim = FALSE, fill = "lightblue", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray40") +
labs(
title = "ANCOVA vs Unadjusted Precision Gain",
x = "Outcome Group",
y = "Variance Ratio"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
# 2. Point Estimate Difference Plot (ANCOVA)
ggplot(df_new, aes(x = outcome_group, y = point_est_diff_AC)) +
geom_violin(trim = FALSE, fill = "lightgreen", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
labs(
title = "Unadjusted vs ANCOVA Point Estimate Difference",
x = "Outcome Group",
y = "Standardized Difference"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
# 3. Variance Estimator Difference Plot (ANCOVA)
ggplot(df_new, aes(x = outcome_group, y = variance_ratio_AC)) +
geom_violin(trim = FALSE, fill = "lightcoral", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray40") +
labs(
title = "Robust vs Model-Based Variance Ratio (ANCOVA)",
x = "Outcome Group",
y = "Variance Ratio"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
##################################
## Super Learner Plots
##################################
# 4. Precision Gain Plot (Super Learner)
ggplot(df_new, aes(x = outcome_group, y = precision_gain_SL)) +
geom_violin(trim = FALSE, fill = "lightcyan", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray40") +
labs(
title = "Super Learner vs Unadjusted Precision Gain",
x = "Outcome Group",
y = "Variance Ratio"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
# 5. Precision Gain Plot (Super Learner, Outliers Removed)
ggplot(df_new %>%
filter(between(
precision_gain_SL,
quantile(precision_gain_SL, 0.25, na.rm = TRUE) - 1.5 * IQR(precision_gain_SL, na.rm = TRUE),
quantile(precision_gain_SL, 0.75, na.rm = TRUE) + 1.5 * IQR(precision_gain_SL, na.rm = TRUE)
)),
aes(x = outcome_group, y = precision_gain_SL)) +
geom_violin(trim = FALSE, fill = "lightcyan", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray40") +
labs(
title = "Super Learner vs Unadjusted Precision Gain (Outliers Removed)",
x = "Outcome Group",
y = "Variance Ratio"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
# 6. Point Estimate Difference Plot (Super Learner)
ggplot(df_new, aes(x = outcome_group, y = point_est_diff_SL)) +
geom_violin(trim = FALSE, fill = "lightpink", alpha = 0.6) +
geom_jitter(width = 0.15, alpha = 0.4, color = "black") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
labs(
title = "Unadjusted vs Super Learner Point Estimate Difference",
x = "Outcome Group",
y = "Standardized Difference"
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, color = "gray60"),
panel.grid.minor = element_blank())
df_summary = df_new %>%
group_by(outcome_group) %>%
summarise(
# ANCOVA precision‐gain
mean_prec_AC     = mean(precision_gain_AC, na.rm = TRUE),
sd_prec_AC       = sd(precision_gain_AC,   na.rm = TRUE),
# ANCOVA robust vs model‐based variance ratio (original)
mean_var_AC      = mean(variance_ratio_AC,  na.rm = TRUE),
sd_var_AC        = sd(variance_ratio_AC,    na.rm = TRUE),
# SuperLearner precision‐gain
mean_prec_SL     = mean(precision_gain_SL,  na.rm = TRUE),
sd_prec_SL       = sd(precision_gain_SL,    na.rm = TRUE),
# ANCOVA variance‐ratio *outlier‐removed*
mean_var_AC_no   = {
v   = variance_ratio_AC
lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
mean(v[v >= lb & v <= ub], na.rm=TRUE)
},
sd_var_AC_no     = {
v   = variance_ratio_AC
lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
sd(v[v >= lb & v <= ub], na.rm=TRUE)
}
) %>%
ungroup()
print(df_summary)
df_summary = df_new %>%
group_by(outcome_group) %>%
summarise(
# ANCOVA precision‐gain
mean_prec_AC     = mean(precision_gain_AC, na.rm = TRUE),
sd_prec_AC       = sd(precision_gain_AC,   na.rm = TRUE),
# ANCOVA robust vs model‐based variance ratio (original)
mean_var_AC      = mean(variance_ratio_AC,  na.rm = TRUE),
sd_var_AC        = sd(variance_ratio_AC,    na.rm = TRUE),
# ANCOVA variance‐ratio *outlier‐removed*
mean_var_AC_no   = {
v   = variance_ratio_AC
lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
mean(v[v >= lb & v <= ub], na.rm=TRUE)
},
sd_var_AC_no     = {
v   = variance_ratio_AC
lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
sd(v[v >= lb & v <= ub], na.rm=TRUE)
},
# SuperLearner precision‐gain
mean_prec_SL     = mean(precision_gain_SL,  na.rm = TRUE),
sd_prec_SL       = sd(precision_gain_SL,    na.rm = TRUE)
) %>%
ungroup()
print(df_summary)
df_summary = df_new %>%
group_by(outcome_group) %>%
summarise(
# ANCOVA precision‐gain
mean_prec_AC     = mean(precision_gain_AC, na.rm = TRUE),
sd_prec_AC       = sd(precision_gain_AC,   na.rm = TRUE),
# ANCOVA robust vs model‐based variance ratio (original)
mean_var_AC      = mean(variance_ratio_AC,  na.rm = TRUE),
sd_var_AC        = sd(variance_ratio_AC,    na.rm = TRUE),
# # ANCOVA variance‐ratio *outlier‐removed*
# mean_var_AC_no   = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   mean(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# sd_var_AC_no     = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   sd(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# SuperLearner precision‐gain
mean_prec_SL     = mean(precision_gain_SL,  na.rm = TRUE),
sd_prec_SL       = sd(precision_gain_SL,    na.rm = TRUE)
) %>%
ungroup()
print(df_summary)
df_summary = df_new %>%
group_by(outcome_group) %>%
summarise(
# ANCOVA precision‐gain
mean_precision_gain_AC     = mean(precision_gain_AC, na.rm = TRUE),
sd_precision_gain_AC       = sd(precision_gain_AC,   na.rm = TRUE),
# ANCOVA robust vs model‐based variance ratio (original)
mean_variance_ratio_AC      = mean(variance_ratio_AC,  na.rm = TRUE),
sd_variance_ratio_AC       = sd(variance_ratio_AC,    na.rm = TRUE),
# # ANCOVA variance‐ratio *outlier‐removed*
# mean_var_AC_no   = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   mean(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# sd_var_AC_no     = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   sd(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# SuperLearner precision‐gain
mean_precision_gain_SL     = mean(precision_gain_SL,  na.rm = TRUE),
sd_precision_gain_SL       = sd(precision_gain_SL,    na.rm = TRUE)
) %>%
ungroup()
print(df_summary)
df_summary = df_new %>%
group_by(outcome_group) %>%
summarise(
# ANCOVA precision‐gain
mean_precision_gain_AC     = mean(precision_gain_AC, na.rm = TRUE),
sd_precision_gain_AC       = sd(precision_gain_AC,   na.rm = TRUE),
# ANCOVA robust vs model‐based variance ratio (original)
mean_var_ratio_AC      = mean(variance_ratio_AC,  na.rm = TRUE),
sd_var_ratio_AC       = sd(variance_ratio_AC,    na.rm = TRUE),
# # ANCOVA variance‐ratio *outlier‐removed*
# mean_var_AC_no   = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   mean(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# sd_var_AC_no     = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   sd(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# SuperLearner precision‐gain
mean_precision_gain_SL     = mean(precision_gain_SL,  na.rm = TRUE),
sd_precision_gain_SL       = sd(precision_gain_SL,    na.rm = TRUE)
) %>%
ungroup()
print(df_summary)
df_summary = df_new %>%
group_by(outcome_group) %>%
summarise(
# ANCOVA precision‐gain
mean_prec_gain_AC     = mean(precision_gain_AC, na.rm = TRUE),
sd_prec_gain_AC       = sd(precision_gain_AC,   na.rm = TRUE),
# ANCOVA robust vs model‐based variance ratio (original)
mean_var_ratio_AC      = mean(variance_ratio_AC,  na.rm = TRUE),
sd_var_ratio_AC       = sd(variance_ratio_AC,    na.rm = TRUE),
# # ANCOVA variance‐ratio *outlier‐removed*
# mean_var_AC_no   = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   mean(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# sd_var_AC_no     = {
#   v   = variance_ratio_AC
#   lb  = quantile(v, 0.25, na.rm=TRUE) - 1.5 * IQR(v, na.rm=TRUE)
#   ub  = quantile(v, 0.75, na.rm=TRUE) + 1.5 * IQR(v, na.rm=TRUE)
#   sd(v[v >= lb & v <= ub], na.rm=TRUE)
# },
# SuperLearner precision‐gain
mean_prec_gain_SL     = mean(precision_gain_SL,  na.rm = TRUE),
sd_prec_gain_SL       = sd(precision_gain_SL,    na.rm = TRUE)
) %>%
ungroup()
print(df_summary)
df_comparison = read_xlsx("cleaned_data/meta_data_comparison.xlsx")
df_bench = read_xlsx("cleaned_data/meta_data_benchmark.xlsx")
View(df_comparison)
analyze_rct(df7, outcome, SL_methods = "SL.rpart")
outcome = df7 %>% select(starts_with("YP")) %>% names()
analyze_rct(df7, outcome, SL_methods = "SL.rpart")
analyze_rct(df7, outcome, SL_methods = "SL.ranger")
analyze_rct(df10_yp, "YP_help_needed_intub", SL_methods = "SL.rpart")
analyze_rct(df10_yp, "YP_help_needed_intub", SL_methods = "SL.ranger")
df20 = read_rds("cleaned_data/trial20.rds")
df20_yp = df20 %>%
filter(!if_any(c(starts_with("YP"), Treatment), is.na)) %>%
mutate(across(
everything(),
~ if (is.numeric(.)) {
replace(., is.na(.), mean(., na.rm = TRUE))
} else if (is.factor(.)) {
replace(., is.na(.), Mode(., na.rm = TRUE)[1])
}
)) %>%
select(
Treatment,
starts_with("YP"),
starts_with("X"))
results = analyze_rct(df20_yp, "YP_IWT_minutes_12w")
df_bench = update_bench(20, df20_yp, "YP_IWT_minutes_12w")
